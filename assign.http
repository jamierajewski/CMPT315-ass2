# -*- restclient -*-

# Jamie Rajewski - Assignment #1 - CMPT315

# TODO (for assignment 2):
# - Add logging (I ran out of time since I figured error-handling was more important)
# - Utilize subrouters

# IMPLEMENTED FEATURES:
# - Extensive error-handling with additional details
# - Authentication middleware
# - JSON and XML encoding options
# - Posting/updating/deleting account validation (can't delete/update/post other people's
#       responses; can't review yourself)
# - Multiple choice option validation
# - Wrapper structs to wrap returned objects

# PURPOSE
# USAGE
# RETURN VALUE/FORMAT
# REQUIRED HEADERS

# Get all info for a specific presenter (excluding login ID's for security). 
# GET /api/v1/people/presenters/[PRESENTER_ID]
# Returns a person object containing the fields from a person
# Required headers: Authorization
# Optional headers: Accept (defaults to JSON if not defined)
GET http://localhost:8080/api/v1/people/presenters/1 HTTP/1.1
Authorization: Bearer LchajfPu
Accept: application/json

###

# Same as above, but tries to pull info on an invalid presenter.
GET http://localhost:8080/api/v1/people/presenters/100 HTTP/1.1
Authorization: Bearer LchajfPu
Accept: application/json

###

# Same as above, but tries to pull info on a valid presenter while
# not using the bearer token.
GET http://localhost:8080/api/v1/people/presenters/1 HTTP/1.1
Accept: application/json

###

# Same as above, but tries to pull info on a valid presenter while
# using an invalid bearer token
GET http://localhost:8080/api/v1/people/presenters/1 HTTP/1.1
Authorization: Bearer JamieIsCool
Accept: application/json

###

# Same as above, but returns a person XML object rather than JSON;
# all requests below that return something can be configured to return either
# JSON or XML via the Accept header
GET http://localhost:8080/api/v1/people/presenters/1 HTTP/1.1
Authorization: Bearer LchajfPu
Accept: application/xml

###

# Get info on ALL presenters (with login ID's excluded for security).
# GET /api/v1/people/presenters/
# Returns a people object containing a list of all presenters.
# Required headers: Authorization
# Optional headers: Accept (defaults to JSON if not defined)
GET http://localhost:8080/api/v1/people/presenters HTTP/1.1
Authorization: Bearer YvutCBLA
Accept: application/json

###

# Get the presentation title for a specific presenter.
# GET /api/v1/people/presentationTitles/[PRESENTER_ID]
# Returns a title object containing the title.
# Required headers: Authorization
# Optional headers: Accept (defaults to JSON if not defined)
GET http://localhost:8080/api/v1/people/presentationTitles/1 HTTP/1.1
Authorization: Bearer YvutCBLA
Accept: application/json

###

# Same as above, but tries to pull an invalid presentation title.
GET http://localhost:8080/api/v1/people/presentationTitles/100 HTTP/1.1
Authorization: Bearer YvutCBLA
Accept: application/json

###

# Get all presentation titles.
# GET /api/v1/people/presentationTitles
# Returns a titles object containing the titles.
# Required headers: Authorization
# Optional headers: Accept (defaults to JSON if not defined)
GET http://localhost:8080/api/v1/people/presentationTitles HTTP/1.1
Authorization: Bearer YvutCBLA
Accept: application/json

###

# Get a specific question.
# GET /api/v1/questions/[QUESTION_ID]
# Returns a question object containing the question.
# Required headers: Authorization
# Optional headers: Accept (defaults to JSON if not defined)
GET http://localhost:8080/api/v1/questions/1 HTTP/1.1
Authorization: Bearer YvutCBLA
Accept: application/json

###

# Same as above, but tries to pull an invalid question.
GET http://localhost:8080/api/v1/questions/100 HTTP/1.1
Authorization: Bearer YvutCBLA
Accept: application/json

###

# Get all questions.
# GET /api/v1/questions
# Returns a questions object containing the questions.
# Required headers: Authorization
# Optional headers: Accept (defaults to JSON if not defined)
GET http://localhost:8080/api/v1/questions/ HTTP/1.1
Authorization: Bearer YvutCBLA
Accept: application/json

###

# Post a response for the given presenter and question contained
# in the body of the request.
# POST /api/v1/answers
# Returns 200 OK on success.
# Required headers: Authorization, Content-Type (must be JSON)
# Optional headers: Accept (defaults to JSON if not defined)
# Required body parameters: presenterid, questionid, answertext
POST http://localhost:8080/api/v1/answers/ HTTP/1.1
Authorization: Bearer LchajfPu
Content-Type: application/json
Accept: application/json

{"presenterid": 1, "questionid": 1, "answertext": "5"}

###

# Same as above, but with no content-type header.
POST http://localhost:8080/api/v1/answers/ HTTP/1.1
Authorization: Bearer LchajfPu
Accept: application/json

{"presenterid": 1, "questionid": 1, "answertext": "5"}

###

# Same as above, but using a different bearer token to signify
# logging in as a different user and posting a response.
POST http://localhost:8080/api/v1/answers/ HTTP/1.1
Authorization: Bearer YvutCBLA
Accept: application/json
Content-Type: application/json

{"presenterid": 3, "questionid": 2, "answertext": "4"}

###

# Same as above, but trying to post a response on behalf of yourself
# which shouldn't be allowed.
POST http://localhost:8080/api/v1/answers/ HTTP/1.1
Authorization: Bearer YvutCBLA
Accept: application/json
Content-Type: application/json

{"presenterid": 1, "questionid": 2, "answertext": "4"}

###

# Same as above, but posting a long-answer question
POST http://localhost:8080/api/v1/answers/ HTTP/1.1
Authorization: Bearer LchajfPu
Accept: application/json
content-type: application/json

{"presenterid": 1, "questionid": 11, "answertext": "The presenter did an awesome job!"}

###

# Same as above, trying to post the same response without using PUT to update
# which shouldn't be allowed
POST http://localhost:8080/api/v1/answers/ HTTP/1.1
Authorization: Bearer LchajfPu
Accept: application/json
content-type: application/json

{"presenterid": 1, "questionid": 11, "answertext": "The presenter did an awesome job!"}

###

# Same as above, but trying to post a response with an invalid multiple choice
# answer type.
POST http://localhost:8080/api/v1/answers/ HTTP/1.1
Authorization: Bearer LchajfPu
Accept: application/json
Content-Type: application/json

{"presenterid": 1, "questionid": 5, "answertext": "100"}

###

# Update the response for a specific question.
# PUT /api/v1/answers/[ANSWER_ID]
# Returns the updated response for verification
# Required headers: Authorization
# Optional headers: Accept (defaults to JSON if not defined)
# Required body parameters: answertext, questionid
PUT http://localhost:8080/api/v1/answers/1 HTTP/1.1
Accept: application/json
Authorization: Bearer LchajfPu
Content-Type: application/json

{"answertext": "1", "questionid": 1}

###

# Same as above, but no answertext parameter which shouldn't work.
PUT http://localhost:8080/api/v1/answers/1 HTTP/1.1
Accept: application/json
Authorization: Bearer LchajfPu
Content-Type: application/json

{"questionid": 1}

###

# Same as above, but no questionid parameter which shouldn't work.
PUT http://localhost:8080/api/v1/answers/1 HTTP/1.1
Accept: application/json
Authorization: Bearer LchajfPu
Content-Type: application/json

{"answertext": "1"}

###

# Same as above, but trying to update an invalid response which shouldn't
# be allowed.
PUT http://localhost:8080/api/v1/answers/100 HTTP/1.1
Accept: application/json
Authorization: Bearer LchajfPu
Content-Type: application/json

{"answertext": "1", "questionid": 1}

###

# Delete the given response.
# DELETE /api/v1/answers/[ANSWER_ID]
# Returns 200 OK.
# Required headers: Authorization
# Optional headers: None
# Required body parameters: None
DELETE http://localhost:8080/api/v1/answers/2 HTTP/1.1
Authorization: Bearer YvutCBLA

###

# Same as above, but trying to delete someone else's response which
# shouldn't work
DELETE http://localhost:8080/api/v1/answers/1 HTTP/1.1
Authorization: Bearer YvutCBLA

###

# Same as above, but trying to delete a non-existant response
# which shouldn't work
DELETE http://localhost:8080/api/v1/answers/100 HTTP/1.1
Authorization: Bearer YvutCBLA